<?php

/**
 * @file
 * Adds support for javascript pullquotes selected from text by adding a span.
 */

/**
 * Default setting to use with variable_get('pullquote_scope').
 */
define('PULLQUOTE_SCOPE_DEFAULT', 0);

/**
 * Default setting to use with variable_get('pullquote_content_by_type').
 */
define('PULLQUOTE_CONTENT_BY_TYPE_DEFAULT', 0);

/**
 * Default setting to use with variable_get('pullquote_load_by_view_mode').
 */
define('PULLQUOTE_VIEW_MODE_LOAD_DEFAULT', 1);

/**
 * Default setting to use with variable_get('pullquote_css').
 */
define('PULLQUOTE_DEFAULT_CSS', 'pullquote_style_1.css');

/**
 * Implements hook_library_info_build().
 */
function pullquote_library_info_build() {
  $libraries = [];

  $libraries['view.custom'] = [
    'css' => [
      'theme' => [
        '/' . \Drupal::config('pullquote.settings')->get('css') => [],
      ],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_page_alter().
 *
 * Includes a CSS and JS file for pullquote on every page load.
 */
function pullquote_page_alter(&$page) {
  // If global scope add the css and js on each load.
  if (\Drupal::config('pullquote.settings')->get('scope') == 1) {
    $css_lib = \Drupal::config('pullquote.settings')->get('css_lib');
    $page['content']['#attached']['library'][] = 'pullquote/view';
    $page['content']['#attached']['library'][] = 'pullquote/view.' . $css_lib;
  }
}

/**
 * Implements hook_node_view().
 *
 * Includes a CSS and JS file on nodes that match the user selected type(s).
 */
function pullquote_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if (pullquote_node_enabled($entity, $view_mode)) {
    $css_lib = \Drupal::config('pullquote.settings')->get('css_lib');
    drupal_set_message('css lib: ' . $css_lib);
    $build['#attached']['library'][] = 'pullquote/view';
    $build['#attached']['library'][] = 'pullquote/view.' . $css_lib;
  }
}

/**
 * Check if pullquote code should be loaded onto the node.
 *
 * @param stdClass $node
 *   A fully loaded node object.
 *
 * @param  string $view_mode
 *   A string denoting the view mode in which to display the node.
 *
 * @return bool
 *   TRUE if pullquote code should be loaded, otherwise FALSE.
 */
function pullquote_node_enabled(\Drupal\node\NodeInterface $node, $view_mode) {
  // Fail fast. Don't bother enabling on nodes if we have global scope.
  $pullquote_global_scope = \Drupal::config('pullquote.settings')->get('scope') == 1 ? TRUE : FALSE;
  if ($pullquote_global_scope) {
    return FALSE;
  }
  // Check if we should load on content only.
  else {
    $content_by_type = \Drupal::config('pullquote.settings')->get('content_by_type') == 1 ? TRUE : FALSE;
    $load_by_view_mode = \Drupal::config('pullquote.settings')->get('load_by_view_mode') == 1 ? TRUE : FALSE;
    //$types
    $view_modes = \Drupal::config('pullquote.settings')->get('view_modes');
    if (!$content_by_type) {
      // Check for view modes.
      // Enable if we should load on all view modes.
      if (!$load_by_view_mode) {
        return TRUE;
      }
      // Otherwise check if the view mode for this node is in our settings.
      elseif (isset($view_modes[$view_mode]) && $view_modes[$view_mode]) {
        return TRUE;
      }
    }
    // Otherwise we care about loading on a per content type basis so check this
    // node's type
    else {
      $types = \Drupal::config('pullquote.settings')->get('content_types');
      // Fail if we care about checking by types and this node doesn't match.
      if (empty($types[$node->getType()]) || !$types[$node->getType()]) {
        return FALSE;
      }
      if (!$load_by_view_mode) {
        return TRUE;
      }
      // Otherwise check if the view mode for this node is in our settings.
      elseif ($view_modes[$view_mode]) {
        return TRUE;
      }
    }
  }
  // Return FALSE if all checks fail.
  return FALSE;
}

/*
 * Implements hook_help().
 *
 * See http://drupal.org/node/632280
 */
function pullquote_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#pullquote':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Pullquote creates a nicely formatted pullquote from a selection of text in a node. The actual text is duplicated with JavaScript and styled with CSS. You can choose from several styles or add your own pullquote styles either by pointing to a CSS file you have added to the site\'s files or uploading a new custom style sheet.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('Surround any text to be made into a pullquote with a span that has the class \'pullquote\'. For example:') . '</p>';
      $output .= '<p><code>' . t('&lt;span class="pullquote"&gt;Quoth the raven.&lt;/span&gt;') . '</code></p>';
      $output .= '<p>' . t('The module also includes a text filter so make this task easier for users who are not HTML savvy. To use the filter, enable it for your content type and surround the desired text with tokens like this:') . '</p>';
      $output .= '<p><code>' . t('[pullquote]This is quote worthy.[/pullquote]') . '</code></p>';
      $output .= '<p>' . t('Users of markdown without a WYSIWYG may prefer an alternate syntax that does not resemble Markdown style links:') . '</p>';
      $output .= '<p><code>' . t('&lt;pullquote&gt;This is quote worthy.&lt;/pullquote&gt;') . '</code></p>';
      $output .= '<p>' . t('Pullquote has WYSIWYG integration. Currently this works best with TinyMCE. CKEditor also works but has some glitches.') . '</p>';
      $output .= '<p>' . t('For more information be sure to read the README file that is packaged with this module and see the Online handbook entry for <a href="http://drupal.org/project/pullquote">Pullquote module</a>') . '</p>';
  }
  return $output;
}

/**
 * Implements hook_wysiwyg_include_directory().
 *
 * Allow WYSIWYG integration.
 */
function pullquote_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return 'plugins/wysiwyg';
  }
}
